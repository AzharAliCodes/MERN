📘 What is a Promise in JavaScript?

A Promise is a JavaScript object that represents a future value — the result of an asynchronous operation (like API call, file read, setTimeout, etc).

It promises to return a value either:

 ✅ after the operation is successful
 ❌ or with an error if it fails

> Think of it like ordering food. The promise is your order receipt — it doesn't give food instantly but promises that food will come later.

---

 📍 States of a Promise

A Promise has three states:

| State       | Meaning                                           |
| ----------- | ------------------------------------------------- |
| pending   | Initial state, neither fulfilled nor rejected yet |
| fulfilled | Operation completed successfully (resolved)       |
| rejected  | Operation failed (rejected with an error)         |

---

 🧾 Syntax of Promise

 ✅ Basic structure:

js
let promise = new Promise(function(resolve, reject) {
  // async task
  if (/ success /) {
    resolve(value); // fulfilled
  } else {
    reject(error);  // rejected
  }
});


 🧠 Example:

js
let promise = new Promise((resolve, reject) => {
  let completed = true;

  if (completed) {
    resolve("Task completed!");
  } else {
    reject("Task failed.");
  }
});


---

 🍽️ How to Consume a Promise

You use .then(), .catch(), and .finally() to handle the result of a promise.

 ✅ Example:

js
promise
  .then((message) => {
    console.log("Success:", message);
  })
  .catch((error) => {
    console.log("Error:", error);
  })
  .finally(() => {
    console.log("Always runs, success or fail");
  });


---

 ⚠️ What is Promise Hell?

Just like callback hell, if you chain too many .then() methods, it becomes hard to read and manage — this is called promise hell.

 ❌ Example:

js
doTask1()
  .then(result1 => {
    return doTask2(result1);
  })
  .then(result2 => {
    return doTask3(result2);
  })
  .then(result3 => {
    console.log("Final result:", result3);
  })
  .catch(error => {
    console.error(error);
  });


> It's better than callback hell, but still not perfect.

---

 ✅ How to Overcome Promise Hell?

Use async and await to write cleaner and more readable code.

 ✔ Same code using async/await:

js
async function runTasks() {
  try {
    let result1 = await doTask1();
    let result2 = await doTask2(result1);
    let result3 = await doTask3(result2);
    console.log("Final result:", result3);
  } catch (error) {
    console.error(error);
  }
}


✅ Much cleaner
✅ Looks like normal code
✅ Easy to read and debug

---
