‚úÖ 1. What is a Callback Function?

 üîπ Definition:

A callback function is a function that is passed as an argument to another function, and it gets called later inside that function.

 üîπ Why use it?

It‚Äôs useful when you want to wait for something to finish before running code ‚Äî like loading a file, waiting for user input, etc.

 üîπ Syntax:

js
function sayHello(name) {
    console.log("Hello, " + name);
}

function greet(callback) {
    let name = "Ali";
    callback(name);  // calling the passed function
}

greet(sayHello);


 üß† In simple terms:

> "I give you a number. You decide what to do with it later." That "what to do" is your callback.

---

 ‚úÖ 2. What is a Closure?

 üîπ Definition:

A closure is when a function remembers the variables from where it was created, even if you call it somewhere else.

 üîπ Example:

js
function outer() {
    let name = "Ali";

    function inner() {
        console.log(name);  // inner remembers 'name'
    }

    return inner;
}

let myFunc = outer();
myFunc();  // Output: "Ali"


 üß† In simple terms:

> A closure is like a child (inner function) who remembers things (variables) from their parent‚Äôs home (outer function), even after moving out.

---

 ‚úÖ 3. What is setTimeout() in JavaScript?

 üîπ Definition:

setTimeout runs a function once after a delay (in milliseconds).

 üîπ Syntax:

js
setTimeout(() => {
    console.log("This runs after 2 seconds");
}, 2000); // 2000 ms = 2 seconds


---

 ‚úÖ 4. What is setInterval() in JavaScript?

 üîπ Definition:

setInterval runs a function again and again after every given delay.

 üîπ Syntax:

js
setInterval(() => {
    console.log("This runs every 2 seconds");
}, 2000); // runs repeatedly every 2 seconds


 ‚úÖ Example: change background color every second

js
setInterval(() => {
    document.body.style.backgroundColor = "lightblue";
}, 1000);


---

 ‚úÖ 5. What is async in JavaScript?

 üîπ Definition:

async is a keyword used to create a function that can use await to pause and wait for a Promise to complete.

It is used to handle asynchronous (delayed) tasks like fetching data from the internet.

---

 üîπ Syntax:

js
async function fetchData() {
    let result = await fetch("https://api.example.com/data");
    let data = await result.json();
    console.log(data);
}

fetchData();


 async makes a function return a Promise.
 await pauses until the fetch() Promise is completed.

---

 üß† In simple terms:

> async and await are like saying:
> ‚ÄúWait here until my data is ready. Then continue.‚Äù

---

 ‚úÖ Summary Table:

| Concept     | What it does                          | Keyword/Syntax Example                   |
| ----------- | ------------------------------------- | ---------------------------------------- |
| Callback    | Pass function as argument             | greet(sayHello)                        |
| Closure     | Inner function remembers outer vars   | function inner() { console.log(name) } |
| setTimeout  | Runs once after delay                 | setTimeout(fn, 1000)                   |
| setInterval | Runs again & again after delay        | setInterval(fn, 1000)                  |
| async/await | Handle delayed (async) tasks smoothly | async function(){ await something }    |

