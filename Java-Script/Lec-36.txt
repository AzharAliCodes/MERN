üî∑ JavaScript Type Conversion (Type Coercion)

 1. toPrimitive

 Converts a complex object (like an object or array) to a primitive (string, number, or boolean).
 It uses valueOf() and toString() internally.

 üß™ Example:

js
let obj = {
  valueOf() {
    return 42;
  },
  toString() {
    return "hello";
  }
};

console.log(+obj); // 42 (uses valueOf first for number)
console.log(String(obj)); // "hello" (uses toString for string)


---

 2. toBoolean

 Converts a value to true or false.
 In JavaScript, some values are falsy, and all others are truthy.

 üîªFalsy values:

 false, 0, "" (empty string), null, undefined, NaN

 üß™ Example:

js
console.log(Boolean(0));        // false
console.log(Boolean("hello"));  // true
console.log(Boolean(null));     // false


---

 3. toString

 Converts any value to a string using String() or .toString().

 üß™ Example:

js
console.log(String(123));       // "123"
console.log((123).toString());  // "123"


---

 4. toNumber

 Converts a value to number using Number()

 üß™ Example:

js
console.log(Number("123"));   // 123
console.log(Number(true));    // 1
console.log(Number(false));   // 0
console.log(Number("abc"));   // NaN


---

 üß≠ DOM (Document Object Model)

The DOM represents the HTML structure as a tree of objects in JavaScript. You can use DOM methods to access and change HTML elements.

---

 üõ†Ô∏è DOM Properties & Methods

| Type           | Common Examples                                                   |
| -------------- | ----------------------------------------------------------------- |
| Properties | innerHTML, innerText, textContent, value, src, href   |
| Methods    | getElementById(), getElementsByClassName(), querySelector() |

---

 üå≥ DOM Element Selectors

 1. getElementById()

 Selects one element using its id.

js
let title = document.getElementById("main-title");
console.log(title);


---

 2. getElementsByClassName()

 Selects all elements with a class name (returns HTMLCollection).

js
let boxes = document.getElementsByClassName("box");
console.log(boxes[0]); // Access the first box


---

 3. getElementsByTagName()

 Selects all elements with a given tag (e.g., div, p).

js
let paragraphs = document.getElementsByTagName("p");
console.log(paragraphs.length);


---

 üîç querySelector & querySelectorAll

 querySelector()

 Returns the first matching element (like CSS selector).

js
let firstButton = document.querySelector("button");
let item = document.querySelector(".item");  // class
let section = document.querySelector("main"); // id


 querySelectorAll()

 Returns all matching elements as a NodeList.

js
let allButtons = document.querySelectorAll("button");
allButtons.forEach(btn => console.log(btn.textContent));


---

 ‚úÖ Difference: querySelector vs querySelectorAll

| Feature     | querySelector         | querySelectorAll         |
| ----------- | ----------------------- | -------------------------- |
| Returns     | First match only        | All matches                |
| Output Type | Single Element          | NodeList (can use forEach) |
| Example     | querySelector(".btn") | querySelectorAll(".btn") |

---

 üßæ Content vs HTML Properties

 1. innerHTML

 Gets or sets HTML content inside an element.

js
element.innerHTML = "<b>Hello</b>"; // bold text added


 2. innerText

 Gets or sets the visible text (renders styles like CSS display: none).

js
element.innerText = "Hello World";


 3. textContent

 Gets or sets all text content, even hidden ones (ignores CSS).

js
element.textContent = "Hello World";


---

 ‚úÖ Difference: textContent vs innerText

| Feature            | textContent               | innerText                  |
| ------------------ | --------------------------- | ---------------------------- |
| Shows hidden text? | ‚úÖ Yes                       | ‚ùå No (ignores hidden text)   |
| Performance        | Faster                      | Slower (recalculates styles) |
| Use case           | Read all text (even hidden) | Get only visible text        |

---

 üî∑ HTMLCollection vs NodeList

Both are array-like collections used in the DOM to store multiple elements. But they are not real arrays.

 ‚úÖ What is HTMLCollection?

 Returned by methods like:

   getElementsByClassName()
   getElementsByTagName()
 Live collection: Updates automatically if DOM changes.

js
let divs = document.getElementsByTagName("div");
console.log(divs.length); // will update if new <div> is added


---

 ‚úÖ What is NodeList?

 Returned by methods like:

   querySelectorAll()
 Static collection: Does not update if DOM changes.
 Can use forEach() directly (unlike HTMLCollection).

js
let buttons = document.querySelectorAll("button");
buttons.forEach(btn => console.log(btn.textContent)); // works


---

 ‚úÖ Difference: HTMLCollection vs NodeList

| Feature             | HTMLCollection                | NodeList                      |
| ------------------- | ----------------------------- | ----------------------------- |
| Returned By         | getElementsBy...            | querySelectorAll()          |
| Live or Static?     | Live (auto-updates)           | Static (does not update)      |
| forEach() support | ‚ùå No (convert to array first) | ‚úÖ Yes (can loop easily)       |
| Contains            | Only elements                 | Elements, text, comments etc. |

---

 üé® Styling Elements

 ‚úÖ element.style

Used to change the inline style of an element.

js
let box = document.getElementById("myBox");
box.style.color = "red";
box.style.backgroundColor = "yellow";


---

 ‚öôÔ∏è Attributes

 ‚úÖ setAttribute(name, value)

Sets a new attribute or updates an existing one.

js
let link = document.querySelector("a");
link.setAttribute("href", "https://example.com");


---

 ‚úÖ removeAttribute(name)

Removes an attribute from an element.

js
link.removeAttribute("href");


---

 üß± Creating & Inserting Elements

 ‚úÖ document.createElement(tagName)

Creates a new DOM element in memory (not added to page yet).

js
let newDiv = document.createElement("div");
newDiv.textContent = "Hello!";


---

 ‚ûï append() vs appendChild()

 ‚úÖ appendChild()

 Adds a node (only one at a time) as the last child.
 Only accepts Node objects (like elements or text nodes).
 Returns the added node.

js
let container = document.getElementById("box");
let para = document.createElement("p");
para.textContent = "I'm a paragraph!";
container.appendChild(para);


---

 ‚úÖ append()

 Adds one or more nodes or text strings.
 More flexible than appendChild.
 Does not return anything.

js
let box = document.getElementById("box");
box.append("Text", document.createElement("hr"));


---

 ‚úÖ Difference: appendChild vs append

| Feature               | appendChild()        | append()                 |
| --------------------- | ---------------------- | -------------------------- |
| Accepts               | Only 1 node        | Multiple nodes or text |
| Can add text directly | ‚ùå No                   | ‚úÖ Yes                      |
| Return value          | Returns the added node | Returns undefined      |
| Flexibility           | Less flexible          | More flexible              |

