 üîç What is Fetch API?

The Fetch API is a built-in browser interface that lets you make network requests (like GET, POST, etc.) to servers ‚Äî just like XMLHttpRequest, but simpler and promise-based.

It returns a Promise, which resolves with a Response object containing the data.

---

 ‚úÖ Basic Syntax

js
fetch(url, options)
  .then(response => response.json()) // or .text(), .blob(), etc.
  .then(data => {
    // use the data
  })
  .catch(error => {
    // handle network error
  });


---

 üì¶ HTTP Request Methods You Can Use:

 GET: fetch data
 POST: send data
 PUT: update data
 DELETE: delete data

---

 üß† Example 1: Simple GET Request

js
fetch("https://jsonplaceholder.typicode.com/posts/1")
  .then(response => response.json())   // Convert response to JSON
  .then(data => {
    console.log("üì¶ Data:", data);
  })
  .catch(error => {
    console.log("‚ùå Error:", error);
  });


 Output (sample):

json
{
  "userId": 1,
  "id": 1,
  "title": "Sample Title",
  "body": "Sample Body"
}


---

 üß† Example 2: POST Request (Send Data)

js
fetch("https://jsonplaceholder.typicode.com/posts", {
  method: "POST",
  headers: {
    "Content-type": "application/json"
  },
  body: JSON.stringify({
    title: "Hello",
    body: "This is a post",
    userId: 1
  })
})
  .then(response => response.json())
  .then(data => {
    console.log("‚úÖ Post created:", data);
  })
  .catch(error => {
    console.log("‚ùå Error:", error);
  });


---

 üìå Important Points

 1. üîÑ .json() is asynchronous

js
fetch(url)
  .then(response => {
    // you must return the JSON promise
    return response.json();
  })
  .then(data => {
    console.log(data);
  });


 2. üö´ Fetch only fails on network errors, not on HTTP errors like 404 or 500.

You need to manually check:

js
fetch(url)
  .then(response => {
    if (!response.ok) {
      throw new Error("HTTP error: " + response.status);
    }
    return response.json();
  })
  .then(data => console.log(data))
  .catch(err => console.error("Fetch error:", err));


---

 üîê Example: With async/await

js
async function getUserData() {
  try {
    let response = await fetch("https://jsonplaceholder.typicode.com/users/1");

    if (!response.ok) {
      throw new Error("Something went wrong");
    }

    let data = await response.json();
    console.log("User Data:", data);
  } catch (err) {
    console.log("‚ùå Error:", err.message);
  }
}

getUserData();


---

 üîÅ Real-life Use Cases

| Use Case          | Example                      |
| ----------------- | ---------------------------- |
| Fetch user data   | Profile or dashboard         |
| Submit a form     | Contact or registration form |
| Search API        | Weather, recipes, products   |
| Load images/files | Lazy loading, galleries      |

---

 üßæ Summary

| Feature            | Description                                  |
| ------------------ | -------------------------------------------- |
| Built-in           | No need for libraries like Axios             |
| Promise-based      | Easy to use with .then() and async/await |
| Flexible           | Supports GET, POST, PUT, DELETE, etc.        |
| Response parsing   | Use .json(), .text(), .blob()          |
| Manual error check | Use response.ok to check HTTP status       |

---