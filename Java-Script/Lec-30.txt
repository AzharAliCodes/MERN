 üîÅ 1. forEach() Function

 ‚úÖ Your Version:

> What is forEach function?
> Explain with example.

 ‚úÖ Enhanced Version:

> forEach is used to loop through each item in an array and run a function on each one.
> It does not return anything (no new array), it just performs an action for every element.

 ‚úÖ Example (Your Way Enhanced):

js
let numbers = [1, 2, 3, 4];

numbers.forEach(function(num) {
  console.log(num  2); // Just prints, doesn‚Äôt return anything
});


 ‚úÖ Example (Arrow Function):

js
numbers.forEach(num => console.log(num  2));


---

 üí¨ 2. Callback Function

 ‚úÖ Your Version:

> What is callback function?
> Explain with example.

 ‚úÖ Enhanced Version:

A callback function is a function that is passed as an argument to another function.
It is called "back" later by that function when needed.

 ‚úÖ Example:

js
function greetUser(name, callback) {
  console.log("Hi " + name);
  callback();
}

function done() {
  console.log("Welcome to our platform!");
}

greetUser("Ali", done);


üß† Here:

 done is a callback function.
 It's passed to greetUser() and called inside it.

You‚Äôve already used callback in .forEach(), .map(), etc.

---

 üèπ 3. Arrow Functions

 ‚úÖ Your Version:

> Arrow function with syntax and example

 ‚úÖ Enhanced Version:

An arrow function is a shorter way to write functions in JS.
It uses the => symbol.

 ‚úÖ Syntax:

js
const functionName = (parameters) => {
  // code
};


 ‚úÖ Example:

js
const add = (a, b) => a + b;

console.log(add(5, 3)); // Output: 8


 ‚úÖ Simple One-line Arrow Function:

js
const square = x => x  x;
console.log(square(4)); // 16


---

 üß≠ 4. map() Function

 ‚úÖ Your Version:

> map is taking value and performing operation on that and lastly giving new array with modified data.

 ‚úÖ Enhanced Version:

‚úÖ Yes, correct Ali!
map() is used to transform each element of an array and return a new array with modified values.

 ‚úÖ Your Example:

js
let numbers = [1, 2, 3];
let newNumbers = numbers.map(num => num  2);
console.log(newNumbers); // [2, 4, 6]


üß† Original array remains unchanged.

---

 üîç 5. filter() Function

 ‚úÖ Your Version:

> filter is used same as map() function ‚Äî here we are using condition to find particular things.

 ‚úÖ Enhanced Version:

Yes, you're right!
filter() is used to keep only those elements that match a condition.
It returns a new array with filtered items.

 ‚úÖ Example:

js
let numbers = [10, 20, 30, 40, 50];

let greaterThan30 = numbers.filter(num => num > 30);

console.log(greaterThan30); // [40, 50]


üß† Think: filter() = "give me only the matching items".

---

 üîΩ 6. reduce() Function

 ‚úÖ Enhanced Version:

reduce() is used to combine all elements of an array into a single value (sum, product, object, etc.).

 ‚úÖ Syntax:

js
array.reduce((accumulator, currentValue) => {
  // combine logic
}, initialValue);


| Term           | Meaning                         |
| -------------- | ------------------------------- |
| accumulator  | Total result so far             |
| currentValue | Current item in array           |
| initialValue | Starting value (usually 0 or 1) |

---

 ‚úÖ Example 1: Sum of all numbers

js
let numbers = [1, 2, 3, 4];

let total = numbers.reduce((sum, num) => sum + num, 0);

console.log(total); // Output: 10


---

 ‚úÖ Example 2: Find max number

js
let numbers = [5, 8, 3, 12, 7];

let max = numbers.reduce((a, b) => a > b ? a : b);
console.log(max); // 12


---

 ‚úÖ Example 3: Convert array to object

js
let fruits = ["apple", "banana", "apple", "orange", "banana"];

let count = fruits.reduce((acc, fruit) => {
  acc[fruit] = (acc[fruit] || 0) + 1;
  return acc;
}, {});

console.log(count);
// Output: { apple: 2, banana: 2, orange: 1 }


---

 ‚úÖ Final Summary

| Function    | Returns New Array? | Used For                                     |
| ----------- | ------------------ | -------------------------------------------- |
| forEach() | ‚ùå No               | Just loops over array, no return             |
| map()     | ‚úÖ Yes              | Modify each item, return new array           |
| filter()  | ‚úÖ Yes              | Keep only items that match condition         |
| reduce()  | ‚ùå (Single Value)   | Combine all into one result (sum, max, etc.) |
| Arrow Func  | ‚Äî                  | Short syntax for writing functions           |
| Callback    | ‚Äî                  | Pass a function as argument to another       |

