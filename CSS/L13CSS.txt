			 CSS Flexbox Explained 

 What is Flexbox?  
Flexbox (Flexible Box Layout) is a CSS layout model that allows easy alignment, positioning, and spacing of elements inside a container. It is used to create responsive designs without using floats or complex positioning.  

 📌 How to Apply Flexbox?  
To use Flexbox, apply display: flex; to a parent element (Flex Container).
css
.container {
  display: flex;  / Makes child elements flex items /
}


---

 🔹 Flexbox Terminology
 1️⃣ Flex Container
- The parent element with display: flex;.  
- It controls the layout of child elements (Flex Items).

 2️⃣ Flex Items
- The direct children of the Flex Container.  
- They follow the rules set by the container.

 📌 Default Flexbox Behavior
By default, when you apply display: flex;, it:
✔ Arranges items horizontally (row direction)  
✔ Aligns items at the start of the container  
✔ Does not wrap items (all items stay in one line)  

---

 🔹 Main Axis & Cross Axis
 ✅ Main Axis  
- Default: Left to right (flex-direction: row;)  
- Controlled using justify-content  
- Changes when flex-direction changes  

 ✅ Cross Axis  
- Perpendicular to the main axis  
- Controlled using align-items  

Example of Axes:
css
.container {
  display: flex;
  flex-direction: row; / Default: horizontal (Main Axis: left → right) /
}

✔ Main Axis: Horizontal (Row)  
✔ Cross Axis: Vertical  

If we change flex-direction: column;  
✔ Main Axis: Vertical (Top → Bottom)  
✔ Cross Axis: Horizontal  

---

 🔹 Flex Properties & Values
 1️⃣ justify-content (Main Axis Alignment)
Controls how items are aligned on the main axis.

| Value | Effect |
|--------|---------|
| flex-start (default) | Items align at the start of the container |
| flex-end | Items align at the end of the container |
| center | Items align at the center |
| space-between | Items are spread out, first at start, last at end |
| space-around | Equal space around items |
| space-evenly | Equal space between and around items |

✅ Example:
css
.container {
  display: flex;
  justify-content: space-between;
}


---

 2️⃣ flex-direction (Main Axis Direction)
Changes the direction of flex items.

| Value | Effect |
|--------|---------|
| row (default) | Left → Right |
| row-reverse | Right → Left |
| column | Top → Bottom |
| column-reverse | Bottom → Top |

✅ Example:
css
.container {
  display: flex;
  flex-direction: column;
}


---

 3️⃣ align-items (Cross Axis Alignment)
Controls how items are aligned on the cross axis.

| Value | Effect |
|--------|---------|
| stretch (default) | Items stretch to fill the container |
| flex-start | Items align at the top (cross axis start) |
| flex-end | Items align at the bottom (cross axis end) |
| center | Items align at the center |
| baseline | Items align based on text baseline |

✅ Example:
css
.container {
  display: flex;
  align-items: center;
}


---

 4️⃣ align-self (Align Individual Item)
Overrides align-items for a single item.

✅ Example:
css
.item {
  align-self: flex-end;
}


---

 5️⃣ align-content (Align Multiple Rows)
Used when flex-wrap: wrap is enabled.

| Value | Effect |
|--------|---------|
| flex-start | All rows at the top |
| flex-end | All rows at the bottom |
| center | All rows at the center |
| space-between | Rows evenly distributed (no space at edges) |
| space-around | Equal space around rows |
| stretch (default) | Stretches to fill container |

✅ Example:
css
.container {
  display: flex;
  flex-wrap: wrap;
  align-content: space-around;
}


---

 6️⃣ gap (Spacing Between Items)
Adds space between flex items.

✅ Example:
css
.container {
  display: flex;
  gap: 20px;
}


---

 7️⃣ flex-wrap (Wrap Items to Next Line)
Controls whether items should stay in one line or move to the next row.

| Value | Effect |
|--------|---------|
| nowrap (default) | Items stay in one line |
| wrap | Items move to next line when needed |
| wrap-reverse | Items move to next line (reverse order) |

✅ Example:
css
.container {
  display: flex;
  flex-wrap: wrap;
}


---

 8️⃣ flex-grow (Expand to Fill Space)
Defines how much a flex item should grow.

✅ Example:
css
.item {
  flex-grow: 1; / Item grows to take available space /
}


---

 9️⃣ flex-shrink (Shrink Items)
Defines how much a flex item should shrink.

✅ Example:
css
.item {
  flex-shrink: 0; / Prevent shrinking /
}


---

 🔹 Overflow (Handling Extra Content)
| Value | Effect |
|--------|---------|
| visible (default) | Content overflows |
| hidden | Hides overflowing content |
| scroll | Adds scrollbar if needed |
| auto | Adds scrollbar only when necessary |

✅ Example:
css
.box {
  width: 200px;
  height: 100px;
  overflow: scroll;
}


---

 🔹 Float (Old Layout Technique)
Before Flexbox, float was used for layouts.

| Value | Effect |
|--------|---------|
| none (default) | No floating |
| left | Moves the element to the left |
| right | Moves the element to the right |

✅ Example:
css
.image {
  float: left;
}

💡 Flexbox is preferred over float for layouts.

---

 🎯 Summary of Flexbox
✔ Use display: flex; to enable Flexbox.  
✔ Main Axis → Controlled by justify-content.  
✔ Cross Axis → Controlled by align-items.  
✔ flex-wrap: wrap; → Moves items to new rows.  
✔ flex-grow, flex-shrink → Control item size.  
✔ gap → Adds spacing between items.  

---

💡 Use Flexbox for:  
✔ Navigation bars  
✔ Cards & Grids  
✔ Centering elements  
✔ Responsive layouts  