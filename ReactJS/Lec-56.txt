 âœ… Lec 57 â€“ Hooks in React

---

 ðŸ”· What are Hooks in React?

Hooks are special functions introduced in React 16.8 that allow you to use state and other React features in functional components â€” without writing a class.

> âœ… Hooks make functional components powerful and dynamic.

---

 ðŸ”¹ Most Common Hook: useState()

 âœ… Syntax:

jsx
const [stateVariable, setStateFunction] = useState(initialValue);


 stateVariable â†’ the current state
 setStateFunction â†’ a function to update the state

---

 âœ… Example: Counter App

jsx
import { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0); // Initial value is 0

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>Click Me</button>
    </div>
  );
}


> ðŸ“Œ When you click the button, setCount updates the state and the component re-renders with the new value.

---

 âœ… Different Types of State in React

There are mainly 4 types of state in React:

---

 ðŸ”¹ 1. Local State

 Managed by useState
 Used inside one component

 âœ… Example:

jsx
const [name, setName] = useState("Ali");


---

 ðŸ”¹ 2. Global State

 Shared between multiple components
 Managed by tools like Context API, Redux, or Zustand

 âœ… Example (with Context):

jsx
const MyContext = React.createContext();


---

 ðŸ”¹ 3. Derived State

 State that is calculated from props or another state
 Avoid storing it directly unless necessary

 âœ… Example:

jsx
const isAdult = age >= 18;


---

 ðŸ”¹ 4. Server State

 Data fetched from an external server/API
 Managed with tools like useEffect, Axios, React Query

 âœ… Example:

jsx
useEffect(() => {
  fetch("https://api.example.com/data")
    .then(res => res.json())
    .then(data => setData(data));
}, []);


---

 âœ… Stateless vs Stateful Components

---

 ðŸ”¹ 1. Stateless Component

 Also called Presentational component
 Does not use state
 Only receives props and displays data

 âœ… Example:

jsx
function Welcome({ name }) {
  return <h1>Hello, {name}!</h1>;
}


---

 ðŸ”¹ 2. Stateful Component

 Has local state using useState
 Can update state and handle events

 âœ… Example:

jsx
function Counter() {
  const [count, setCount] = useState(0);
  return <button onClick={() => setCount(count + 1)}>Count: {count}</button>;
}


---

 âœ… Install React Developer Tools

 ðŸ”§ What is it?

React DevTools is a browser extension that helps you:

 Inspect React component hierarchy
 View and edit props and state
 Debug performance issues

---

 ðŸ’» How to install:

 âœ… For Chrome:

1. Go to: [Chrome Web Store â€“ React Developer Tools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi)
2. Click Add to Chrome
3. After install, open DevTools â†’ you'll see a new React tab

 âœ… For Firefox:

 Search in the [Firefox Add-ons](https://addons.mozilla.org/) store for React Developer Tools

---

 ðŸ§ª After Installation:

 Run your React app (npm run dev or npm start)
 Open Developer Tools (F12)
 Click on the React tab
 You can now:

   See the component tree
   Inspect state and props
   Edit values live

---

 âœ… Summary Table

| Concept             | Description                                                |
| ------------------- | ---------------------------------------------------------- |
| Hook                | Function to use state/features in functional components    |
| useState()        | Most basic Hook for managing local state                   |
| Local State         | Belongs to a single component                              |
| Global State        | Shared across components (Context, Redux)                  |
| Derived State       | Computed from props or other state                         |
| Server State        | Data fetched from an API                                   |
| Stateless Component | Only uses props, no state                                  |
| Stateful Component  | Manages its own state                                      |
| React DevTools      | Debugging tool for inspecting props, state, and components |

