 ✅ 1. useEffect Hook — Root Concept

 🔹 What is useEffect?

useEffect is a React hook that lets you perform side effects in your component.

🧠 Side effects include:

 Fetching data from an API
 Setting up event listeners
 Updating the DOM manually
 Subscribing/unsubscribing to services

---

 🔹 Syntax of useEffect

jsx
useEffect(() => {
  // Code that runs after render

  return () => {
    // Cleanup code (optional)
  };
}, [dependencies]);


---

 🔸 2. useEffect Types (based on dependencies)

| Pattern                             | Meaning                                       | Example Use Case                   |
| ----------------------------------- | --------------------------------------------- | ---------------------------------- |
| useEffect(() => { ... })          | Runs after every render                   | Logging                            |
| useEffect(() => { ... }, [])      | Runs only once (like componentDidMount) | Fetching data on mount             |
| useEffect(() => { ... }, [value]) | Runs when value changes                 | Responding to prop or state change |

---

 ✅ 3. Mounting and Unmounting in useEffect

 📍 Mounting:

 When a component is added to the DOM for the first time.
 Happens once when the component is rendered initially.

jsx
useEffect(() => {
  console.log("Mounted");
}, []);


 📍 Unmounting:

 When a component is removed from the DOM.
 Cleanup code is run before the component is destroyed.

jsx
useEffect(() => {
  console.log("Component mounted");

  return () => {
    console.log("Component unmounted"); // Cleanup
  };
}, []);


---

 ✅ 4. Cleanup Function in useEffect

 🔹 Purpose:

 Cleanup side effects (like event listeners, timers, subscriptions).
 Prevents memory leaks and duplicate effects.

 🔸 Syntax:

jsx
useEffect(() => {
  // Start some effect
  const interval = setInterval(() => {
    console.log("Running...");
  }, 1000);

  // Cleanup
  return () => {
    clearInterval(interval); // Remove interval on unmount
  };
}, []);


---

 ✅ 5. Real-world Example

jsx
import React, { useState, useEffect } from 'react';

function Timer() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    console.log("Component Mounted");

    const interval = setInterval(() => {
      setCount((prev) => prev + 1);
    }, 1000);

    // Cleanup on unmount
    return () => {
      clearInterval(interval);
      console.log("Component Unmounted");
    };
  }, []); // Runs once

  return <h1>Timer: {count}</h1>;
}


 ⏱ setInterval runs every second.
 🧹 clearInterval stops it when the component is removed (unmounted).

---

 ✅ 6. Dependency Array Behavior

jsx
useEffect(() => {
  console.log("Effect triggered due to value change");

  return () => {
    console.log("Cleanup before next effect or unmount");
  };
}, [value]);


 The effect runs whenever value changes.
 Before every re-run or unmount, cleanup runs first.

---

 🧠 Summary:

| Term                  | Meaning                                                            |
| --------------------- | ------------------------------------------------------------------ |
| useEffect()         | Hook for side effects                                              |
| Dependency Array [] | Controls when effect runs                                          |
| Mounting              | Component is added to DOM                                          |
| Unmounting            | Component is removed from DOM                                      |
| Cleanup Function      | Code inside return () => {} — runs before unmount or next effect |


