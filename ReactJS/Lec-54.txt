 📘 Lec 54 – Components, JSX vs JS, Import/Export in React

---

 ✅ 1. Components in React

React applications are built using components. These are reusable and independent blocks of code that return JSX.

 📌 Two Types:

1. Functional Component (modern way)
2. Class Component (older, rarely used now)

---

 🔷 Functional Component (Recommended)

jsx
function Welcome() {
  return <h1>Hello, Ali!</h1>;
}
export default Welcome;


 🔷 Class Component (Old Method)

jsx
import React, { Component } from 'react';

class Welcome extends Component {
  render() {
    return <h1>Hello from class</h1>;
  }
}
export default Welcome;


---

 ✅ 2. Import & Export in React (Concept in Detail)

To use a component or function from another file, you need to export it from one file and import it in another.

There are two types:

---

 ✅ 3. Default Export & Import

Use when you export only one thing from a file.

 🔷 Syntax:

File: Message.js

jsx
function Message() {
  return <h2>This is a default exported component.</h2>;
}
export default Message;


File: App.jsx

jsx
import Message from './Message'; // No curly braces


> ✅ Default export can have any name during import (but usually we keep the original name for clarity).

---

 ✅ 4. Named Export & Import

Use when you want to export multiple things from one file.

 🔷 Syntax:

File: utils.js

jsx
export const add = (a, b) => a + b;
export const subtract = (a, b) => a - b;


File: App.jsx

jsx
import { add, subtract } from './utils'; // Curly braces required


> ❌ You must use the exact exported names inside the curly braces.

---

 🔁 You can also mix:

js
export default Welcome;
export const greet = () => "Hi!";


js
import Welcome, { greet } from './Welcome';


---

 ✅ 5. What to Use? Default or Named?

| Criteria         | Default Export                | Named Export                          |
| ---------------- | ----------------------------- | ------------------------------------- |
| Exports per file | One                           | Many                                  |
| Import syntax    | No braces                     | Requires braces                       |
| Name on import   | Can be changed                | Must match exported name              |
| Use when         | You export one main component | You have multiple utilities/functions |

> ✅ Best Practice:
> Use default export for components, and named export for utility functions/constants.

---

 ✅ 6. Difference between JSX and JS

| Feature        | JSX                               | JS                          |
| -------------- | --------------------------------- | --------------------------- |
| Stands for     | JavaScript XML                    | JavaScript                  |
| Syntax         | HTML-like in JS                   | Pure JS syntax              |
| Purpose        | Define UI inside JS               | General purpose scripting   |
| Used in        | React (rendering UI)              | Everywhere                  |
| Requires Babel | Yes – needs to be converted to JS | No – native to browser/Node |

 🔷 JSX Example:

jsx
const element = <h1>Hello JSX</h1>;


 🔷 JS Equivalent:

js
const element = React.createElement('h1', null, 'Hello JSX');


---

 ✅ 7. What is Babel?

Babel is a JavaScript compiler that:

 Converts modern JavaScript (ES6+) and JSX into older JS that browsers understand.
 Transforms JSX → React.createElement
 Ensures compatibility across browsers.

 📌 In React:

 JSX won’t run directly in the browser.
 Babel helps convert it to regular JS during build process.

---

 ✅ Summary Table

| Topic          | Description                                  |
| -------------- | -------------------------------------------- |
| Components     | Reusable blocks of UI (functional or class)  |
| Default Export | One export per file, imported without braces |
| Named Export   | Many exports per file, imported with braces  |
| JSX vs JS      | JSX = HTML in JS; needs Babel                |
| Babel          | Transpiles JSX/ES6 to browser-friendly JS    |
| Best Practice  | Use default for components, named for utils  |


