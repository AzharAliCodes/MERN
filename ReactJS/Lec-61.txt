📦 Step 1: Install React Router

First, you need to install React Router.

bash
npm install react-router-dom


Make sure you're using React Router v6 or later (latest as of now).

---

 🔁 What is Routing in React?

Routing is the process of navigating between different pages/components in a React Single Page Application (SPA) without reloading the browser.

It allows you to:

 Show different components on different URLs.
 Use navigation menus.
 Handle 404 (not found) routes.
 Do nested navigation (like Dashboard > Profile).

---

 ✅ Method 1: Basic Routing using <BrowserRouter>, <Routes>, and <Route>

 🔹 Step-by-Step:

1. Wrap your app with BrowserRouter
2. Use Routes to define all your routes
3. Use Route to define paths and components

 🧪 Example:

jsx
// App.js
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import About from './pages/About';
import NotFound from './pages/NotFound';

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
        {/ 404 Route /}
        <Route path="" element={<NotFound />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;


✅ Explanation:

 <BrowserRouter> uses HTML5 history API
 <Routes> replaces Switch in React Router v6
 "" matches any undefined route (404 page)

---

 ✅ Method 2: Object-based Routing (Using useRoutes)

This method lets you define routes as JS objects and use useRoutes hook.

 🧪 Example:

jsx
// App.js
import React from 'react';
import { BrowserRouter, useRoutes } from 'react-router-dom';
import Home from './pages/Home';
import About from './pages/About';
import NotFound from './pages/NotFound';

const AppRoutes = () => {
  const routes = useRoutes([
    { path: '/', element: <Home /> },
    { path: '/about', element: <About /> },
    { path: '', element: <NotFound /> },
  ]);

  return routes;
};

function App() {
  return (
    <BrowserRouter>
      <AppRoutes />
    </BrowserRouter>
  );
}

export default App;


✅ When to use this?

 Better for dynamic or nested route generation
 You can organize routes in a single config file

---

 ✅ Method 3: Routing using createRoutesFromElements()

A hybrid of object and JSX route definitions.

 🧪 Example:

jsx
// App.js
import React from 'react';
import {
  BrowserRouter,
  createBrowserRouter,
  RouterProvider,
  createRoutesFromElements,
  Route,
} from 'react-router-dom';
import Home from './pages/Home';
import About from './pages/About';
import NotFound from './pages/NotFound';

const router = createBrowserRouter(
  createRoutesFromElements(
    <>
      <Route path="/" element={<Home />} />
      <Route path="/about" element={<About />} />
      <Route path="" element={<NotFound />} />
    </>
  )
);

function App() {
  return <RouterProvider router={router} />;
}

export default App;


✅ Why use this?

 Works with new Data APIs (like loaders/actions)
 Gives access to advanced features like lazy loading

---

 🚫 Creating a 404 Page Not Found

Use a wildcard "" route.

jsx
<Route path="" element={<NotFound />} />


 NotFound.jsx

jsx
const NotFound = () => {
  return <h2>404 - Page Not Found</h2>;
};

export default NotFound;


---

 🔁 Programmatic Navigation using useNavigate

 📌 Need for Programmatic Navigation:

When you want to redirect a user after a button click, form submission, or action — without a <Link>.

 🔧 Hook: useNavigate()

jsx
import { useNavigate } from 'react-router-dom';

function Home() {
  const navigate = useNavigate();

  const goToAbout = () => {
    navigate('/about');
  };

  return <button onClick={goToAbout}>Go to About Page</button>;
}


✅ You can also navigate with data:

jsx
navigate('/about', { state: { from: 'HomePage' } });


---

 🔄 Outlet Component – Nested Routing

 🔹 What is Outlet?

<Outlet /> is a placeholder for nested route components.

 🧪 Example:

jsx
// App.js
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Dashboard from './pages/Dashboard';
import Profile from './pages/Profile';
import Settings from './pages/Settings';

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/dashboard" element={<Dashboard />}>
          <Route path="profile" element={<Profile />} />
          <Route path="settings" element={<Settings />} />
        </Route>
      </Routes>
    </BrowserRouter>
  );
}

export default App;


 🧾 Dashboard.jsx

jsx
import { Outlet, Link } from 'react-router-dom';

const Dashboard = () => {
  return (
    <div>
      <h2>Dashboard</h2>
      <nav>
        <Link to="profile">Profile</Link>
        <Link to="settings">Settings</Link>
      </nav>
      <Outlet /> {/ Nested components render here /}
    </div>
  );
};

export default Dashboard;


✅ Result:

 /dashboard/profile shows Profile inside Dashboard
 /dashboard/settings shows Settings inside Dashboard


